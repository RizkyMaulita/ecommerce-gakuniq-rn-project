generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// ----- Collection MigrationSeed
model MigrationSeed {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  timestamp DateTime
  filename  String
}

// ----- Collection UserRole
model UserRole {
  id    String       @id @default(auto()) @map("_id") @db.ObjectId
  name  String       @unique()
  code  UserRoleEnum @unique() @default(CUSTOMER)
  users User[]

  @@unique([name, code])
}

enum UserRoleEnum {
  SUPERADMIN
  ADMIN
  CUSTOMER
}

// ----- Collection User

model User {
  id           String               @id @default(auto()) @map("_id") @db.ObjectId
  email        String               @unique
  username     String               @unique
  password     String
  statusVerify UserVerifyStatusEnum @default(PENDING)
  fullName     String?
  imgUrl       String?
  phoneNumber  String?
  dob          DateTime?
  addressess   Address[]
  role         UserRole?            @relation(fields: [roleId], references: [id])
  roleId       String?              @db.ObjectId
  createdAt    DateTime?            @default(now())
  updatedAt    DateTime?
  carts        Cart[]
}

type Address {
  address            String
  provinceId         String
  cityId             String
  subDistrictId      String
  zipCode            String
  latitude           Float?
  longitude          Float?
  benchmark          String?
  contactName        String
  contactPhoneNumber String
  tag                AddressTagEnum @default(HOME)
  isMainAddress      Boolean        @default(false)
}

enum AddressTagEnum {
  OFFICE
  HOME
}

enum UserVerifyStatusEnum {
  PENDING
  VERIFIED
  NOT_VERIFIED
}

// ----- Collection Category
model Category {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String    @unique()
  imgUrl   String?
  products Product[]
}

// ----- Collection Product
model Product {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  slug        String
  imgUrl      String
  price       Int
  stock       Int
  rate        Float?
  gender      ProductGenderEnum
  categoryId  String?           @db.ObjectId
  category    Category?         @relation(fields: [categoryId], references: [id])
  documents   ProductDoc[]
  sourceUrl   String?
  carts       Cart[]
}

type ProductDoc {
  url  String
  type ProductDocTypeEnum
}

enum ProductDocTypeEnum {
  VIDEO
  IMAGE
}

enum ProductGenderEnum {
  MALE
  FEMALE
  UNISEX
}

// ----- Collection Cart
model Cart {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  productId String    @db.ObjectId
  userId    String    @db.ObjectId
  quantity  Int
  isActive  Boolean
  createdAt DateTime? @default(now())
  updatedAt DateTime?
  product   Product   @relation(fields: [productId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
}
