type Order {
  id: ID!
  userId: ID!
  address: Address
  totalPrice: Int
  totalProductPrice: Int
  shippingExpCode: OrderShippingExpCodeEnum
  shippingExpService: OrderShippingExpServiceEnum
  shippingExpPrice: Int
  paymentToken: String
  status: OrderStatusEnum
  createdAt: Date
  updatedAt: Date
  orderDetails: [OrderDetail]
}

type OrderDetail {
  id: ID!
  productId: ID!
  orderId: ID!
  userId: ID
  quantity: Int
  price: Int
  totalPrice: Int
  createdAt: Date
  updatedAt: Date
  product: Product
}

enum OrderShippingExpCodeEnum {
  JNE
  TIKI
  POS
}

enum OrderShippingExpServiceEnum {
  OKE
  YES
  REG
}

enum OrderStatusEnum {
  DRAFT
  CREATED
  CANCELLED
  PAYMENT_PENDING
  PAYMENT_SUCCESS
  PAYMENT_CANCELL
  PAYMENT_REJECT
  PROCESS_PACKAGING
  PROCESS_SHIPPING
  PROCESS_SHIPPING_RETUR
  PROCESS_SHIPPING_ARRIVED
  COMPLETED
  COMPLAIN
}

input CreateOrderInput {
  orderId: ID
  cartIds: [ID]
  address: AdressInput!
  shippingExpCode: OrderShippingExpCodeEnum!
  shippingExpService: OrderShippingExpServiceEnum!
  shippingExpPrice: Int!
}

type Query {
  getMyOrders(status: OrderStatusEnum): ResponseOrders
  getMyOrderDetail(orderId: ID!): ResponseOrder
}

type Mutation {
  createDraftOrder(cartIds: [ID!]!): ResponseOrder
  upsertOrder(payload: CreateOrderInput!): ResponseOrder
}
